package org.opensaga.plugin.compiler;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

import org.apache.maven.artifact.Artifact;
import org.apache.maven.artifact.DependencyResolutionRequiredException;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.descriptor.PluginDescriptor;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.classworlds.realm.ClassRealm;
import org.opensaga.plugin.util.MavenLogAppender;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public abstract class AbstractProjectClassRealmBasedMojo
    extends AbstractMojo
{

    private static final Logger log = LoggerFactory.getLogger(AbstractProjectClassRealmBasedMojo.class);

    /**
     * The Maven project.
     * 
     * @parameter default-value="${project}"
     * @required
     * @readonly
     */
    MavenProject project;
    
    /**
     * The plugin descriptor
     * 
     * @parameter default-value="${descriptor}"
     */
    private PluginDescriptor descriptor;

    /**
     * Prepare the classpath for the execution of this mojo. Collects all class
     * path elements from the different scopes and class folders.
     * 
     * @throws MojoExecutionException
     */
    protected void initializePluginClassPath() throws MojoExecutionException
    {
        MavenLogAppender.startPluginLog(this);
    
        this.descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor");
    
        try
        {
            // Load all class path entries and add them to plugin classpath
            List<String> runtimeClasspath = project.getRuntimeClasspathElements();
            List<String> providedClasspath = getProvidedClasspathElements();
            List<String> generatedClasspath = getCustomClasspathElements();
    
            List<String> newPluginClasspath = new ArrayList<String>();
            newPluginClasspath.addAll(runtimeClasspath);
            newPluginClasspath.addAll(providedClasspath);
            newPluginClasspath.addAll(generatedClasspath);
    
            log.debug("Collected new class path elements: " + Arrays.toString(newPluginClasspath.toArray()));
            
            extendPluginClasspath(newPluginClasspath);
        }
        catch (DependencyResolutionRequiredException e)
        {
            throw new MojoExecutionException("The runtime classpath couldn't be resolved.", e);
        }
    }

    /**
     * Returns the classpath for the generated class files. This are the classes
     * which are generated by OpenSAGA.
     * 
     * @return A list of the generated classpath
     */
    protected abstract List<String> getCustomClasspathElements();

    /**
     * Returns the classpath element for the provided scope in the dependent
     * artifacts.
     * 
     * @return A list of class path elements from the provided scope
     */
    private List<String> getProvidedClasspathElements()
    {
        List<String> providedClasspath = new ArrayList<String>();
    
        // Examine the dependency artifacts for provided scoped artifacts
        Set<Artifact> dependencyArtifacts = project.getDependencyArtifacts();
        for (Artifact artifact : dependencyArtifacts)
        {
            if(artifact.getFile() != null)
            {
                providedClasspath.add(artifact.getFile().getAbsolutePath());
            }
        }
        return providedClasspath;
    }

    /**
     * Add the given classpath elements to the matching class realm.
     * 
     * @param elements The class path element to add to the plugin class realm.
     * @throws MojoExecutionException
     */
    private void extendPluginClasspath(List<String> elements) throws MojoExecutionException
    {
        try
        {
            ClassRealm realm = descriptor.getClassRealm();
    
            for (String element : elements)
            {
                File elementFile = new File(element);
                realm.addURL(elementFile.toURI().toURL());
    
                log.debug("Adding element to plugin classpath: " + elementFile.getPath());
            }
        }
        catch (Exception ex)
        {
            throw new MojoExecutionException(ex.toString(), ex);
        }
    }

}
