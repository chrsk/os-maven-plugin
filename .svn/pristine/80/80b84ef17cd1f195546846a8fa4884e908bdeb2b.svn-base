package org.opensaga.plugin.builder.meta.parser;

import java.io.File;
import java.util.List;
import java.util.Map;

import org.opensaga.plugin.builder.meta.generator.model.MetaModel;

/**
 * Provides a parser which is capable to handle XML model files. The XML model
 * files are parsed into so called {@link MetaModel}s. Those meta models
 * represent the XML structure in a more accessible way and provide some
 * convenience methods which can be used to generate e.g. Java classes from
 * them.
 * 
 * @see ModelHandler
 * @author cklewes
 */
public interface TypeBasedModelParser
{

    /**
     * Parses the given model file. The model file must be a XML file otherwise
     * an {@link XmlParserFailureException} is thrown. The
     * {@code TypeBasedModelParser} may parses the file into several meta
     * models. In every case a list is returned with either one ore more
     * {@link MetaModel}s.
     * 
     * @param modelFile The model file which should be parsed.
     * @return A list with either one parsed meta model or more.
     * @throws XmlParserFailureException When the file is not a XML file or the
     *             internal structure doesn't match this
     *             {@link TypeBasedModelParser}.
     */
    List<MetaModel> parseModel(File modelFile) throws XmlParserFailureException;


    /**
     * Retrieves a list of supported types of this model parser. A supported
     * type is mainly the root node of the XML file. The XML which should be
     * parsed must match the supported types returned by this method.
     * 
     * @return A list of supported model types. Consists of one or more entries.
     */
    List<String> getSupportedTypes();


    /**
     * A convenience method for {@link #getSupportedTypes()}. The passed type
     * argument will be checked against the returned list of
     * {@link #getSupportedTypes()}.
     * 
     * @param type The type you want to check if it's supported by this model
     *            parser.
     * @return {@code true} when the type is supported, otherwise {@code false}.
     */
    boolean supportsType(String type);


    /**
     * Retrieves the unique ID of this model parser. This ID can be used to get
     * the result context of a special model parser or map the configuration.
     * 
     * @return A unique ID for this model parser.
     */
    String getId();


    /**
     * Merges the two passed meta model instances. The values and properties of
     * the second meta model are merged in to the first given meta model. The
     * meta models must be of the same type and also must be originally
     * generated by this model parser.
     * 
     * @see #parseModel(File)
     * @param metaModel The meta model to merge the values from the other meta
     *            model.
     * @param otherMetaModel The meta model to merge into the first meta model.
     */
    void mergeModel(MetaModel metaModel, MetaModel otherMetaModel);


    /**
     * Defines a specific configuration for this type based model parser.
     * 
     * @param value The configuration for this model parser.
     */
    void setConfiguration(Map<String, Object> value);
}
